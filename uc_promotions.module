<?php
/**
 * @file Ubercart Promotions main module
 */

/**
 * Implements hook_permission
 * Valid permissions for this module
 */
function uc_promotions_permission() {
  return array(
    'access ubercart promotions' => array(
      'title' => t('Access Ubercart Promotions'), 
      'description' => t('Perform administration tasks for Ubercart Promotions.'),
    ),
  );
}

/**
 * Implements hook_menu
 *
 */
function uc_promotions_menu(){
  $items['admin/store/uc_promotions'] = array(
    'title' => t('Promotions'),
    'description' => t('Active promotions'),
    'access arguments' => array('access ubercart promotions'),
    'page callback' => 'uc_promotions_get_promos',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_promotions.inc',
  );
  
  $items['admin/store/uc_promotions/view'] = array(
    'title' => t('View promotions'),
    'description' => t('Active promotions'),
    'access arguments' => array('access ubercart promotions'),
    'page callback' => 'uc_promotions_get_promos',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_promotions.inc',
  );
  
  $items['admin/store/uc_promotions/create'] = array(
    'title' => t('Create a promotion'),
    'description' => t('In this area you can add a promotion'),
    'access arguments' => array('access ubercart promotions'),
    'page callback' => 'uc_promotions_create_promo',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_promotions.inc',
  );
  
  $items['admin/store/uc_promotions/%uc_promotions_id/edit'] = array(
    'title' => t('Modifica promozione'),
    'description' => t('In this area you can edit a promotion'),
    'access arguments' => array('access ubercart promotions'),
    'page callback' => 'uc_promotions_edit_promo',
    'page arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_promotions.inc',
  );
  
  return $items;
}

/*
 * Load a promo, called from wildcard menu item
 */
function uc_promotions_id_load($promo_id){
  $query = db_select('uc_promotions', 'p')
            ->fields('p', array('promoid', 'nid', 'price_limit', 'domain', 'status'))
            ->condition('promoid', $promo_id);
  
  $results = $query->execute();  

  
  $rows = array();
  foreach($results as $data){
    $rows['promoid'] = $data->promoid;
    $rows['nid'] = $data->nid;
    $rows['price_limit'] = $data->price_limit;
    $rows['domain'] = $data->domain;
    $rows['status'] = $data->status;
  }

  return $rows;
}

/**
 * Implements hook_uc_cart_alter
 * Inject a promotion inside the cart when a specific condition is satisfied
 */

function uc_promotions_uc_cart_alter(&$items) {
  //loading active promos
  $query = db_select('uc_promotions', 'p')
            ->fields('p', array('promoid', 'nid', 'price_limit', 'domain', 'status'))
            ->condition('status', 1);
  $results = $query->execute();

  foreach($results as $data){
    //applying the promotion
    uc_promotions_handler($data->nid, $data->price_limit, $data->domain, $items);
    
    $discount = _uc_promotions_discount($data->nid, $data->price_limit, $items);
    if($discount){
      $items[] = $discount;
    }
  }
}

/**
 * Promotion handler
 */
function uc_promotions_handler($nid, $price_limit, $domain, &$items){
  $domain = empty($domain) ? $_SERVER['HTTP_HOST'] : $domain ;
  if($_SERVER['HTTP_HOST'] != $domain){    
    return;
  }
  
  //Offer
  $promo_free_id = $nid;
  $promo_data = array("module" => "uc_product");
  
  $price = _uc_promotions_price($items);
  
  //Check for promo products inside list
  $item_check = 0;
  foreach($items as $item){
    
    if($item->nid == $promo_free_id) {
      //Populate $item_check
      $item_check = 1;
      
      //Force the promotion qty to 1
      if($item->qty > 1){
        $item->qty = 1;
      }
    }
    
  }

  //Add the promotion
  if($price >= $price_limit && $item_check == 0){
    uc_cart_add_item($promo_free_id, 1);
  }
  
  //Remove the promotion
  if($price < $price_limit){
    uc_cart_remove_item($promo_free_id, null, $promo_data);
  }
}

/**
 * Checks the current cart total and determine the total price
 *
 */
function _uc_promotions_price($items){
  $price = 0;
  foreach($items as $item){
    $price += ($item->qty * $item->price);
  }
  return $price;
}


function _uc_promotions_discount($nid, $price_limit, $items){
  //Discount
  $discount = new stdClass;
  $promo_free_id = $nid;
  $price = _uc_promotions_price($items);

  foreach($items as $item){
    if($item->nid == $promo_free_id) {
      //Discount amount = promotional item price
      $discount->title = t('Promotion: ') . $item->title;
      $discount->code = 'promo-'.$item->model;
      $discount->amount = $item->price;
    }
  }

  //Add the discount
  if($price >= $price_limit){
    return _uc_promotions_discount_cart_item($discount);
  }
  
  //Remove the discount
  if($price < $price_limit){
    return false;
  }
}

/**
 * Creates a fake cart-item corrresponding to this promotion, 
 * allowing this coupon to be displayed in the cart.
 *
 */
function _uc_promotions_discount_cart_item($discount) {
  $item = array(
    'cart_item_id' => 0,
    'module' => 'uc_promotions',
    'title' => $discount->title,
    'nid' => 0,
    'qty' => 1,
    'price' => -$discount->amount,
    'data' => array('module' => 'uc_coupon', 'shippable' => FALSE, 'code' => $discount->code),
    'model' => 0,
    'weight' => 0
  );

  return (object) $item;
}


/**
 * Implements hook_uc_order().
 *
 * This makes sure the active, validated coupons are saved to the order.
 * It also prevents any fake coupon cart-items from being saved to the order.
 */
function uc_promotions_uc_order($op, &$order) {
  if ($op == 'presave') {
    // Make sure any fake cart items don't get saved with the order if the checkout page is skipped
    // (e.g. Paypal Express Checkout, Google Checkout)
    foreach ($order->products as $key => $product) {
      if (isset($product->module) && $product->module == 'uc_promotions') {
        unset($order->products[$key]);
      }
    }
  }
}



